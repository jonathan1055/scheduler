<?php

/**
 * @file
 * Install and uninstall hooks for the Scheduler API Test module.
 */

/**
 * Implements hook_uninstall().
 *
 * Although not strictly necessary for testing, it is good practice to tidy up
 * module config and content on uninstalling. Plus, when developing this module
 * and enabling it manually as a real module, this code is needed to clean up,
 * otherwise a re-install fails.
 *
 * The entity types, custom fields and storage are deleted automatically by
 * having 'enforced: module: - scheduler_api_test' in the config/install/*.yml
 * files. However, we have to delete the actual entity content here.
 */
function scheduler_api_test_uninstall() {

  // Delete any node content of the custom node type.
  $ids_query = \Drupal::database()->select('node', 'n')
    ->fields('n', ['nid'])
    ->condition('n.type', ['scheduler_api_test'], 'IN')
    ->execute();
  if ($ids = $ids_query->fetchCol()) {
    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $entities = $storage->loadMultiple($ids);
    $entity = reset($entities);
    $storage->delete($entities);
    \Drupal::messenger()->addMessage(\Drupal::translation()->formatPlural(count($ids), '1 %type node has been deleted.', '@count %type nodes have been deleted.', [
      '%type' => $entity->type->entity->label(),
    ]));
  }

  // Delete any media items of the custom media type.
  $ids_query = \Drupal::database()->select('media', 'm')
    ->fields('m', ['mid'])
    ->condition('m.bundle', ['scheduler_api_media_test'], 'IN')
    ->execute();
  if ($ids = $ids_query->fetchCol()) {
    $storage = \Drupal::entityTypeManager()->getStorage('media');
    $entities = $storage->loadMultiple($ids);
    $entity = reset($entities);
    $storage->delete($entities);
    \Drupal::messenger()->addMessage(\Drupal::translation()->formatPlural(count($ids), '1 %type item has been deleted.', '@count %type items have been deleted.', [
      '%type' => $entity->bundle->entity->label(),
    ]));
  }
}
