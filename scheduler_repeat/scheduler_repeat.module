<?php

/**
 * @file
 * Scheduler Repeat extends scheduling by providing options for repeating
 * publishing and un-publishing.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Component\Plugin\Exception\PluginException;

/**
 * Implements hook_entity_base_field_info().
 */
function scheduler_repeat_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    $fields['repeat'] = BaseFieldDefinition::create('scheduler_repeater')
      ->setLabel(t('Repeat'))
      ->setDisplayOptions('form', [
        'type' => 'scheduler_repeater_widget',
        'weight' => 31,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->addConstraint('SchedulerRepeat');

    return $fields;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function scheduler_repeat_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if (!_scheduler_repeat_should_show_field($form)) {
    // @todo What if scheduler_form_node_form_alter() is invoked AFTER this?
    // @todo What if scheduler date fields are configured as hidden?
    _scheduler_repeat_remove_field($form);
    return;
  }
  _scheduler_repeat_move_field_to_fieldset($form);
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function scheduler_repeat_node_presave(EntityInterface $node) {
  
  // @todo Determine if this is the best function to do this.

  if (!$repeater = _scheduler_repeat_get_repeater($node)) {
    return 0;
  }
  
  if (empty($node->get('publish_on')->value) || empty($node->get('publish_on')->value)) {
    // When this function is executed during cron publishing or unpublishing one
    // or both of these values will be empty. But that is OK as the next values
    // are already set and saved.
    return 0;
  }
  
  $next_publish_on = $repeater->calculateNextPublishedOn($node->get('publish_on')->value);
  $next_unpublish_on = $repeater->calculateNextUnpublishedOn($node->get('unpublish_on')->value);
  $request_time = \Drupal::time()->getRequestTime();
  while ($next_publish_on < $request_time) {
    $next_publish_on = $repeater->calculateNextPublishedOn($next_publish_on);
    $next_unpublish_on = $repeater->calculateNextUnpublishedOn($next_unpublish_on);
  }

  // Save the 'next' dates.
  $node->set('repeat', [
    'plugin' => $node->repeat->plugin,
    'next_publish_on' => $next_publish_on,
    'next_unpublish_on' => $next_unpublish_on,
  ]);
}

/**
 * @param $form
 *
 * @return bool
 */
function _scheduler_repeat_should_show_field($form) {
  return isset($form['publish_on']) && isset($form['unpublish_on']);
}

/**
 * @param $form
 *   The node form where we expect repeat field to be.
 */
function _scheduler_repeat_remove_field(&$form) {
  unset($form['repeat']);
}

/**
 * @param $form
 *   The node form where we expect repeat field to be.
 */
function _scheduler_repeat_move_field_to_fieldset(&$form) {
  $form['repeat']['#group'] = 'scheduler_settings';
}

/**
 * @todo Is this function needed now?
 *
 * @param NodeInterface $node
 */
function _scheduler_repeat_clear_snapshot_of_scheduling_timestamps(NodeInterface &$node) {
  $node->set('repeat', [
    'plugin' => $node->repeat->plugin,
    'next_publish_on' => NULL,
    'next_unpublish_on' => NULL,
  ]);
}

/**
 * @param NodeInterface $node
 *
 * @return \Drupal\scheduler_repeat\SchedulerRepeaterInterface|null
 */
function _scheduler_repeat_get_repeater(NodeInterface $node) {
  if (empty($node->repeat->plugin)) {
    return NULL;
  }
  // @todo When we cater for optional associated data, the id can be extrated,
  // and the other values added into $plugin_data.
  $plugin_id = $node->repeat->plugin;
  $plugin_data = ['node' => $node];

  /** @var \Drupal\scheduler_repeat\SchedulerRepeaterManager $scheduler_repeater_manager */
  $scheduler_repeater_manager = \Drupal::service('plugin.manager.scheduler_repeat.repeater');

  /** @var \Drupal\scheduler_repeat\SchedulerRepeaterInterface $repeater */
  try {
    $repeater = $scheduler_repeater_manager->createInstance($plugin_id, $plugin_data);
  } catch (PluginException $e) {
    _scheduler_repeat_log_warning('Could not create scheduler repeater instance: @message', ['@message' => $e->getMessage()]);
    return NULL;
  }

  return $repeater;
}

/**
 * @param string $message
 * @param array $context
 */
function _scheduler_repeat_log_warning(string $message, array $context) {
  \Drupal::logger('scheduler_repeat')->warning($message, $context);
}
