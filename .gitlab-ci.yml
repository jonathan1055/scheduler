################
# DrupalCI includes:
# As long as you include this, any future includes added by the Drupal Association will be accessible to your pipelines automatically.
# View these include files at https://git.drupalcode.org/project/gitlab_templates/
################
include:
  # MR 96
  # - project: issue/gitlab_templates-3408456
  #   ref: 3408456-test-theory

  # MR 127 Testdox
  # - project: issue/gitlab_templates-3359927
  #   ref: 3359927-testdox

  # MR 139 Check for phpunit files
  - project: issue/gitlab_templates-3419008
    ref: 3419008-check-for-phpunit-files

  # MR 155 Run cspell in root folder
  # - project: issue/gitlab_templates-3426136
  #   ref: 3426136-cspell-in-root-folder

    file:
      - '/includes/include.drupalci.main.yml'
      - '/includes/include.drupalci.variables.yml'
      - '/includes/include.drupalci.workflows.yml'

################
# Pipeline configuration variables
################
variables:
  # If the MR has changes to a file that is retrieved via curl then specify these two CURL_TEMPLATES variables to match the repo and ref above.
  # Better to have any value here, even if it does not match the values above, because any MR is likely to be more up-to-date than 'default-ref'.
  _CURL_TEMPLATES_REPO: issue/gitlab_templates-3426136
  _CURL_TEMPLATES_REF: 3426136-cspell-in-root-folder

  SKIP_PAGES: 1
  SKIP_COMPOSER_LINT: 1
  SKIP_ESLINT: 1
  SKIP_STYLELINT: 1
  SKIP_PHPCS: 1
  SKIP_CSPELL: 1
  SKIP_PHPSTAN: 1

  SKIP_NIGHTWATCH: 1
  SKIP_PHPUNIT: 0
  SKIP_TEST_ONLY_CHANGES: 1

  # OPT_IN_TEST_CURRENT: 0
  # OPT_IN_TEST_MAX_PHP: 1
  # OPT_IN_TEST_PREVIOUS_MINOR: 1
  # OPT_IN_TEST_PREVIOUS_MAJOR: 1
  OPT_IN_TEST_NEXT_MINOR: 0
  # OPT_IN_TEST_NEXT_MAJOR: 1

  _SHOW_ENVIRONMENT_VARIABLES: 1
  _PHPUNIT_CONCURRENT: 1
  _PHPUNIT_TESTGROUPS: ''
  _PHPUNIT_PARAMETERS:
    value: ''
    description: 'Additional parameters for use in PHPUNIT parallel job matrix.'

################
# Job overrides
################

.calculate-gitlab-ref: &calculate-gitlab-ref
  - |
    [[ $_CURL_TEMPLATES_REF == "" ]] && export _CURL_TEMPLATES_REF=$_GITLAB_TEMPLATES_REF
    [[ $_CURL_TEMPLATES_REPO == "" ]] && export _CURL_TEMPLATES_REPO=$_GITLAB_TEMPLATES_REPO

.skip-and-opt-in-debug: &skip-and-opt-in-debug
  - |
    echo " "
    echo "Build jobs"
    echo "SKIP_COMPOSER=$SKIP_COMPOSER" $([[ $SKIP_COMPOSER != 0 ]] && echo "(not default)")
    echo "SKIP_PAGES=$SKIP_PAGES" $([[ $SKIP_PAGES != 0 ]] && echo "(not default)")
    echo " "
    echo "Lint jobs"
    echo "SKIP_COMPOSER_LINT=$SKIP_COMPOSER_LINT" $([[ $SKIP_COMPOSER_LINT != 0 ]] && echo "(not default)")
    echo "SKIP_ESLINT=$SKIP_ESLINT" $([[ $SKIP_ESLINT != 0 ]] && echo "(not default)")
    echo "SKIP_STYLELINT=$SKIP_STYLELINT" $([[ $SKIP_STYLELINT != 0 ]] && echo "(not default)")
    echo "SKIP_PHPCS=$SKIP_PHPCS" $([[ $SKIP_PHPCS != 0 ]] && echo "(not default)")
    echo "SKIP_PHPSTAN=$SKIP_PHPSTAN" $([[ $SKIP_PHPSTAN != 0 ]] && echo "(not default)")
    echo "SKIP_CSPELL=$SKIP_CSPELL" $([[ $SKIP_CSPELL != 0 ]] && echo "(not default)")
    echo " "
    echo "Testing jobs"
    echo "SKIP_PHPUNIT=$SKIP_PHPUNIT" $([[ $SKIP_PHPUNIT != 0 ]] && echo "(not default)")
    echo "SKIP_NIGHTWATCH=$SKIP_NIGHTWATCH" $([[ $SKIP_NIGHTWATCH != 0 ]] && echo "(not default)")
    echo " "
    echo "Opt-in values"
    echo "OPT_IN_TEST_CURRENT=$OPT_IN_TEST_CURRENT" $([[ $OPT_IN_TEST_CURRENT != 1 ]] && echo "(not default)")
    echo "OPT_IN_TEST_MAX_PHP=$OPT_IN_TEST_MAX_PHP" $([[ $OPT_IN_TEST_MAX_PHP != 0 ]] && echo "(not default)")
    echo "OPT_IN_TEST_PREVIOUS_MINOR=$OPT_IN_TEST_PREVIOUS_MINOR" $([[ $OPT_IN_TEST_PREVIOUS_MINOR != 0 ]] && echo "(not default)")
    echo "OPT_IN_TEST_NEXT_MINOR=$OPT_IN_TEST_NEXT_MINOR" $([[ $OPT_IN_TEST_NEXT_MINOR != 0 ]] && echo "(not default)")
    echo "OPT_IN_TEST_PREVIOUS_MAJOR=$OPT_IN_TEST_PREVIOUS_MAJOR" $([[ $OPT_IN_TEST_PREVIOUS_MAJOR != 0 ]] && echo "(not default)")
    echo "OPT_IN_TEST_NEXT_MAJOR=$OPT_IN_TEST_NEXT_MAJOR" $([[ $OPT_IN_TEST_NEXT_MAJOR != 0 ]] && echo "(not default)")
    echo " "
    echo "_CUSTOM_VAR=$_CUSTOM_VAR"
    printf "\n_DEPRECATION_MESSAGE=\n$_DEPRECATION_MESSAGE"
    echo " "
    echo "_GITLAB_TEMPLATES_REPO = $_GITLAB_TEMPLATES_REPO"
    echo "_GITLAB_TEMPLATES_REF  = $_GITLAB_TEMPLATES_REF"
    echo "_CURL_TEMPLATES_REPO   = $_CURL_TEMPLATES_REPO"
    echo "_CURL_TEMPLATES_REF    = $_CURL_TEMPLATES_REF"

.phpunit-tests-exist-rule: &phpunit-tests-exist-rule
  - exists:
      - tests/**/*Test.php
    when: on_success

# -------------------------------- BUILD ---------------------------------------

.composer-base:
  before_script:
    - *skip-and-opt-in-debug
    - pwd
    - ls -l
  after_script:
    # Show the last three commits. Current directory /builds/project/scheduler ($CI_PROJECT_DIR) is correct.
    - pwd
    - ls -l
    - git show -3 --stat

# -------------------------------- VALIDATE ------------------------------------

eslint:
  allow_failure: false

stylelint:
  allow_failure: false

phpcs:
  allow_failure: false

phpstan:
  after_script:
    - test -f phpstan.neon && echo "=== This is phpstan.neon ===" && cat phpstan.neon
    - php $CI_PROJECT_DIR/scripts/phpstan-baseline-summary.php phpstan-baseline-to-fix.neon

# Do not need to run phpstan twice.
phpstan (next minor):
  rules:
    - when: never

cspell:
  after_script:
    - WORDS=$CI_PROJECT_DIR/_cspell_unrecognized_words.txt
    - test -f $WORD && echo "=== This is $WORDS ===" && cat $WORDS || true

# -------------------------------- TEST ----------------------------------------

.scheduler-matrix: &scheduler-matrix
  parallel:
    matrix:
      # Run test groups in parallel. This also speeds up identification of failing tests.
      # @todo put back "scheduler_drush" when https://www.drupal.org/i/3359998 is solved.
      - _MATRIX_VALUE:
        - scheduler
        - scheduler_api
        # - scheduler_drush
        - scheduler_js
        - scheduler_kernel
        - scheduler_rules_integration

.scheduler-phpunit-rule: &scheduler-phpunit-rule
  # Re-define _PHPUNIT_EXTRA depending on the value of _PHPUNIT_CONCURRENT
  - if: '$_PHPUNIT_CONCURRENT == "0"'
    variables:
      # Specify parameters that will be passed to PHPUNIT (needs --group)
      _PHPUNIT_EXTRA: $_PHPUNIT_PARAMETERS --group $_MATRIX_VALUE
  - if: '$_PHPUNIT_CONCURRENT == "1"'
    variables:
      # Specify parameters that will be passed to RUN-TESTS.SH (without --group)
      _PHPUNIT_EXTRA: $_PHPUNIT_PARAMETERS $_MATRIX_VALUE

phpunit:
  <<: *scheduler-matrix
  rules:
    - !reference [ .opt-in-current-rule ]
    - !reference [ .skip-phpunit-rule ]
    - *scheduler-phpunit-rule
    - *phpunit-tests-exist-rule
  after_script:
    # This is executed in all phpunit jobs because they extend phpunit (not .phpunit-base).
    # $WHAT_TO_RUN is not included because it is only derived in the phpunit script, so will always be blank here.
    - echo "_PHPUNIT_CONCURRENT=$_PHPUNIT_CONCURRENT, _PHPUNIT_TESTGROUPS=$_PHPUNIT_TESTGROUPS"
    - echo "_MATRIX_VALUE=$_MATRIX_VALUE, _PHPUNIT_EXTRA=$_PHPUNIT_EXTRA"

phpunit (next minor):
  rules:
    - !reference [ .opt-in-next-minor-rule ]
    - !reference [ .skip-phpunit-rule ]
    # Do not automatically run, but allow the job to be started manually.
    - when: manual
  # Cannot use parallel matrix when the job is triggered manually, because the
  # matrix values are not passed through. Therefore remove 'parallel' and run
  # the tests in one job. Cannot have _PHPUNIT_TESTGROUPS = --all because this
  # includes scheduler_drush. Therefore list all except that group.
  parallel:
  variables:
    _PHPUNIT_TESTGROUPS: 'scheduler, scheduler_api, scheduler_js, scheduler_kernel, scheduler_rules_integration'
    # Use core ignoreFile to show deprecations. This will only work with $_PHPUNIT_CONCURRENT=1
    _PHPUNIT_CONCURRENT: 1
    SYMFONY_DEPRECATIONS_HELPER: "ignoreFile=$CI_PROJECT_DIR/$_WEB_ROOT/core/.deprecation-ignore.txt"
  allow_failure: true
